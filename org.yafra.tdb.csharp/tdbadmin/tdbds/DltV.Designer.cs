//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace tdb.DS {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("DltV")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DltV : global::System.Data.DataSet {
        
        private tdbv_dltDataTable tabletdbv_dlt;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DltV() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DltV(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["tdbv_dlt"] != null)) {
                    base.Tables.Add(new tdbv_dltDataTable(ds.Tables["tdbv_dlt"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tdbv_dltDataTable tdbv_dlt {
            get {
                return this.tabletdbv_dlt;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            DltV cln = ((DltV)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["tdbv_dlt"] != null)) {
                    base.Tables.Add(new tdbv_dltDataTable(ds.Tables["tdbv_dlt"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tabletdbv_dlt = ((tdbv_dltDataTable)(base.Tables["tdbv_dlt"]));
            if ((initTable == true)) {
                if ((this.tabletdbv_dlt != null)) {
                    this.tabletdbv_dlt.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DltV";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DltV.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tabletdbv_dlt = new tdbv_dltDataTable();
            base.Tables.Add(this.tabletdbv_dlt);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetdbv_dlt() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            DltV ds = new DltV();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void tdbv_dltRowChangeEventHandler(object sender, tdbv_dltRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tdbv_dltDataTable : global::System.Data.TypedTableBase<tdbv_dltRow> {
            
            private global::System.Data.DataColumn columnDLT_ID;
            
            private global::System.Data.DataColumn columnBEZ_ID;
            
            private global::System.Data.DataColumn columnBEZ;
            
            private global::System.Data.DataColumn columnCODE;
            
            private global::System.Data.DataColumn columnS_ID;
            
            private global::System.Data.DataColumn columnH_DLT_ID;
            
            private global::System.Data.DataColumn columnHOSTID;
            
            private global::System.Data.DataColumn columnDLT_GRP_ID;
            
            private global::System.Data.DataColumn columnTYP;
            
            private global::System.Data.DataColumn columnTYPID;
            
            private global::System.Data.DataColumn columnCAT;
            
            private global::System.Data.DataColumn columnCAT_ID;
            
            private global::System.Data.DataColumn columnLEVELPLACE;
            
            private global::System.Data.DataColumn columnNUMPLACE;
            
            private global::System.Data.DataColumn columnSTA;
            
            private global::System.Data.DataColumn columnSTAID;
            
            private global::System.Data.DataColumn columnTEXTID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tdbv_dltDataTable() {
                this.TableName = "tdbv_dlt";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tdbv_dltDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tdbv_dltDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DLT_IDColumn {
                get {
                    return this.columnDLT_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BEZ_IDColumn {
                get {
                    return this.columnBEZ_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BEZColumn {
                get {
                    return this.columnBEZ;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CODEColumn {
                get {
                    return this.columnCODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn S_IDColumn {
                get {
                    return this.columnS_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn H_DLT_IDColumn {
                get {
                    return this.columnH_DLT_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HOSTIDColumn {
                get {
                    return this.columnHOSTID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DLT_GRP_IDColumn {
                get {
                    return this.columnDLT_GRP_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TYPColumn {
                get {
                    return this.columnTYP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TYPIDColumn {
                get {
                    return this.columnTYPID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CATColumn {
                get {
                    return this.columnCAT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CAT_IDColumn {
                get {
                    return this.columnCAT_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LEVELPLACEColumn {
                get {
                    return this.columnLEVELPLACE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NUMPLACEColumn {
                get {
                    return this.columnNUMPLACE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STAColumn {
                get {
                    return this.columnSTA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STAIDColumn {
                get {
                    return this.columnSTAID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TEXTIDColumn {
                get {
                    return this.columnTEXTID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tdbv_dltRow this[int index] {
                get {
                    return ((tdbv_dltRow)(this.Rows[index]));
                }
            }
            
            public event tdbv_dltRowChangeEventHandler tdbv_dltRowChanging;
            
            public event tdbv_dltRowChangeEventHandler tdbv_dltRowChanged;
            
            public event tdbv_dltRowChangeEventHandler tdbv_dltRowDeleting;
            
            public event tdbv_dltRowChangeEventHandler tdbv_dltRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addtdbv_dltRow(tdbv_dltRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tdbv_dltRow Addtdbv_dltRow(
                        int DLT_ID, 
                        int BEZ_ID, 
                        string BEZ, 
                        string CODE, 
                        int S_ID, 
                        int H_DLT_ID, 
                        int HOSTID, 
                        int DLT_GRP_ID, 
                        string TYP, 
                        int TYPID, 
                        string CAT, 
                        int CAT_ID, 
                        int LEVELPLACE, 
                        int NUMPLACE, 
                        string STA, 
                        int STAID, 
                        int TEXTID) {
                tdbv_dltRow rowtdbv_dltRow = ((tdbv_dltRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        DLT_ID,
                        BEZ_ID,
                        BEZ,
                        CODE,
                        S_ID,
                        H_DLT_ID,
                        HOSTID,
                        DLT_GRP_ID,
                        TYP,
                        TYPID,
                        CAT,
                        CAT_ID,
                        LEVELPLACE,
                        NUMPLACE,
                        STA,
                        STAID,
                        TEXTID};
                rowtdbv_dltRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowtdbv_dltRow);
                return rowtdbv_dltRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tdbv_dltDataTable cln = ((tdbv_dltDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tdbv_dltDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDLT_ID = base.Columns["DLT_ID"];
                this.columnBEZ_ID = base.Columns["BEZ_ID"];
                this.columnBEZ = base.Columns["BEZ"];
                this.columnCODE = base.Columns["CODE"];
                this.columnS_ID = base.Columns["S_ID"];
                this.columnH_DLT_ID = base.Columns["H_DLT_ID"];
                this.columnHOSTID = base.Columns["HOSTID"];
                this.columnDLT_GRP_ID = base.Columns["DLT_GRP_ID"];
                this.columnTYP = base.Columns["TYP"];
                this.columnTYPID = base.Columns["TYPID"];
                this.columnCAT = base.Columns["CAT"];
                this.columnCAT_ID = base.Columns["CAT_ID"];
                this.columnLEVELPLACE = base.Columns["LEVELPLACE"];
                this.columnNUMPLACE = base.Columns["NUMPLACE"];
                this.columnSTA = base.Columns["STA"];
                this.columnSTAID = base.Columns["STAID"];
                this.columnTEXTID = base.Columns["TEXTID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDLT_ID = new global::System.Data.DataColumn("DLT_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDLT_ID);
                this.columnBEZ_ID = new global::System.Data.DataColumn("BEZ_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBEZ_ID);
                this.columnBEZ = new global::System.Data.DataColumn("BEZ", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBEZ);
                this.columnCODE = new global::System.Data.DataColumn("CODE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODE);
                this.columnS_ID = new global::System.Data.DataColumn("S_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnS_ID);
                this.columnH_DLT_ID = new global::System.Data.DataColumn("H_DLT_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnH_DLT_ID);
                this.columnHOSTID = new global::System.Data.DataColumn("HOSTID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHOSTID);
                this.columnDLT_GRP_ID = new global::System.Data.DataColumn("DLT_GRP_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDLT_GRP_ID);
                this.columnTYP = new global::System.Data.DataColumn("TYP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTYP);
                this.columnTYPID = new global::System.Data.DataColumn("TYPID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTYPID);
                this.columnCAT = new global::System.Data.DataColumn("CAT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCAT);
                this.columnCAT_ID = new global::System.Data.DataColumn("CAT_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCAT_ID);
                this.columnLEVELPLACE = new global::System.Data.DataColumn("LEVELPLACE", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLEVELPLACE);
                this.columnNUMPLACE = new global::System.Data.DataColumn("NUMPLACE", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNUMPLACE);
                this.columnSTA = new global::System.Data.DataColumn("STA", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTA);
                this.columnSTAID = new global::System.Data.DataColumn("STAID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTAID);
                this.columnTEXTID = new global::System.Data.DataColumn("TEXTID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTEXTID);
                this.columnDLT_ID.AllowDBNull = false;
                this.columnBEZ_ID.AllowDBNull = false;
                this.columnBEZ.AllowDBNull = false;
                this.columnS_ID.AllowDBNull = false;
                this.columnH_DLT_ID.AllowDBNull = false;
                this.columnHOSTID.AllowDBNull = false;
                this.columnDLT_GRP_ID.AllowDBNull = false;
                this.columnTYP.AllowDBNull = false;
                this.columnTYPID.AllowDBNull = false;
                this.columnCAT.AllowDBNull = false;
                this.columnLEVELPLACE.AllowDBNull = false;
                this.columnSTA.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tdbv_dltRow Newtdbv_dltRow() {
                return ((tdbv_dltRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tdbv_dltRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tdbv_dltRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tdbv_dltRowChanged != null)) {
                    this.tdbv_dltRowChanged(this, new tdbv_dltRowChangeEvent(((tdbv_dltRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tdbv_dltRowChanging != null)) {
                    this.tdbv_dltRowChanging(this, new tdbv_dltRowChangeEvent(((tdbv_dltRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tdbv_dltRowDeleted != null)) {
                    this.tdbv_dltRowDeleted(this, new tdbv_dltRowChangeEvent(((tdbv_dltRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tdbv_dltRowDeleting != null)) {
                    this.tdbv_dltRowDeleting(this, new tdbv_dltRowChangeEvent(((tdbv_dltRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removetdbv_dltRow(tdbv_dltRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DltV ds = new DltV();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tdbv_dltDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tdbv_dltRow : global::System.Data.DataRow {
            
            private tdbv_dltDataTable tabletdbv_dlt;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tdbv_dltRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletdbv_dlt = ((tdbv_dltDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DLT_ID {
                get {
                    return ((int)(this[this.tabletdbv_dlt.DLT_IDColumn]));
                }
                set {
                    this[this.tabletdbv_dlt.DLT_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BEZ_ID {
                get {
                    return ((int)(this[this.tabletdbv_dlt.BEZ_IDColumn]));
                }
                set {
                    this[this.tabletdbv_dlt.BEZ_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BEZ {
                get {
                    return ((string)(this[this.tabletdbv_dlt.BEZColumn]));
                }
                set {
                    this[this.tabletdbv_dlt.BEZColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CODE {
                get {
                    try {
                        return ((string)(this[this.tabletdbv_dlt.CODEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CODE\' in table \'tdbv_dlt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletdbv_dlt.CODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int S_ID {
                get {
                    return ((int)(this[this.tabletdbv_dlt.S_IDColumn]));
                }
                set {
                    this[this.tabletdbv_dlt.S_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int H_DLT_ID {
                get {
                    return ((int)(this[this.tabletdbv_dlt.H_DLT_IDColumn]));
                }
                set {
                    this[this.tabletdbv_dlt.H_DLT_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int HOSTID {
                get {
                    return ((int)(this[this.tabletdbv_dlt.HOSTIDColumn]));
                }
                set {
                    this[this.tabletdbv_dlt.HOSTIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DLT_GRP_ID {
                get {
                    return ((int)(this[this.tabletdbv_dlt.DLT_GRP_IDColumn]));
                }
                set {
                    this[this.tabletdbv_dlt.DLT_GRP_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TYP {
                get {
                    return ((string)(this[this.tabletdbv_dlt.TYPColumn]));
                }
                set {
                    this[this.tabletdbv_dlt.TYPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TYPID {
                get {
                    return ((int)(this[this.tabletdbv_dlt.TYPIDColumn]));
                }
                set {
                    this[this.tabletdbv_dlt.TYPIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CAT {
                get {
                    return ((string)(this[this.tabletdbv_dlt.CATColumn]));
                }
                set {
                    this[this.tabletdbv_dlt.CATColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CAT_ID {
                get {
                    try {
                        return ((int)(this[this.tabletdbv_dlt.CAT_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CAT_ID\' in table \'tdbv_dlt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletdbv_dlt.CAT_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LEVELPLACE {
                get {
                    return ((int)(this[this.tabletdbv_dlt.LEVELPLACEColumn]));
                }
                set {
                    this[this.tabletdbv_dlt.LEVELPLACEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NUMPLACE {
                get {
                    try {
                        return ((int)(this[this.tabletdbv_dlt.NUMPLACEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NUMPLACE\' in table \'tdbv_dlt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletdbv_dlt.NUMPLACEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string STA {
                get {
                    return ((string)(this[this.tabletdbv_dlt.STAColumn]));
                }
                set {
                    this[this.tabletdbv_dlt.STAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int STAID {
                get {
                    try {
                        return ((int)(this[this.tabletdbv_dlt.STAIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'STAID\' in table \'tdbv_dlt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletdbv_dlt.STAIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TEXTID {
                get {
                    try {
                        return ((int)(this[this.tabletdbv_dlt.TEXTIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TEXTID\' in table \'tdbv_dlt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletdbv_dlt.TEXTIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCODENull() {
                return this.IsNull(this.tabletdbv_dlt.CODEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCODENull() {
                this[this.tabletdbv_dlt.CODEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCAT_IDNull() {
                return this.IsNull(this.tabletdbv_dlt.CAT_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCAT_IDNull() {
                this[this.tabletdbv_dlt.CAT_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNUMPLACENull() {
                return this.IsNull(this.tabletdbv_dlt.NUMPLACEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNUMPLACENull() {
                this[this.tabletdbv_dlt.NUMPLACEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTAIDNull() {
                return this.IsNull(this.tabletdbv_dlt.STAIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTAIDNull() {
                this[this.tabletdbv_dlt.STAIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTEXTIDNull() {
                return this.IsNull(this.tabletdbv_dlt.TEXTIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTEXTIDNull() {
                this[this.tabletdbv_dlt.TEXTIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tdbv_dltRowChangeEvent : global::System.EventArgs {
            
            private tdbv_dltRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tdbv_dltRowChangeEvent(tdbv_dltRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tdbv_dltRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591