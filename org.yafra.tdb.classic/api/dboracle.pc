/*D***********************************************************
 * modul:     travelDB SQL INTERFACE all DB access functions
 *
 * db:        Pro*C (embedded sql) ORACLE8i or higher
 *
 * copyright: yafra.org, Switzerland
 *************************************************************/
#if !defined(MPDBORACLE)
#define MPDBORACLE
#undef MPDBHPSQL
#undef MPDBINGRES
#endif

#include <mpdb.h>      /* Includefile fuer die Relationalen Datenbanken */
#include <mpmain.h>    /* Includefile fuer MARCO-POLO */
#include <mpproapi.h>  /* Prototypes fï¿½r ANSI-C */
#include <mpprolib.h>
#include <signal.h>
#include <sys/wait.h>
#include <sqlcpr.h>

#ifndef ORACLEPROC
#include "version.h"
static char rcsid[]="$Header: /yafra/cvsroot/mapo/source/api/dboracle.pc,v 1.2 2004-02-07 13:52:54 mwn Exp $";
#endif

/* local prototyps */
static int MPAPIdb_checkstatus( void );
static int AllocateDescriptors ( void );
static void truncSemicolon ( char * );

/* Include SQL headers */
EXEC SQL INCLUDE sqlca;	 	/* Type definition for sqlca.____ */
EXEC SQL INCLUDE sqlda;	 	/* Type definition for sqlda.____ */
EXEC SQL INCLUDE oraca;		/* definition for oraca structure */

/**************************************************************/
/* defines                                                    */
/**************************************************************/
#define	SQL_MESSAGE	132
#define	SQL_NAME	128
#define	SQL_MAX_COL	50
#define	SQL_MAX_ROW_LEN	512
#define	SQL_MAX_ROW	50
#define	SQL_MAX_BUF	SQL_MAX_ROW_LEN*SQL_MAX_ROW
#define	SQLMEMCHUNK 102400
#define	STRIPHIGHBIT 0x7f
#define	LOC_NUM_ALLOC_DOUBLES   6333
            /* about 50K. Double is the most restrictive alignment */
#define	LOC_ALLOC_CHUNK         (LOC_NUM_ALLOC_DOUBLES * sizeof(double))
            /* Arbitrary value for allocating select list items    */
#define	LOC_ARBITRARY_SELECT_LIST_SIZE   512
#define	err_ret printf
#define	SQL_SINGLE_RCTX (void*)0



/**************************************************************/
/* SQL declare section                                        */
/**************************************************************/
EXEC SQL BEGIN DECLARE SECTION;
char mpdb_dbname[128];		      /* SQL_NAME + 1 */
char mpdb_sqlmsg[133];         /* SQL_MESSAGE + 1 */
char mpdb_msg[4*_RECORDLEN];
char *mpdb_user;
char *mpdb_passwd;
char *mpdb_sqlquery;
EXEC SQL END DECLARE SECTION;

/* Declare pointers to bind and select descriptors */
SQLDA *bindDP = (SQLDA *)0;
SQLDA *selectDP = (SQLDA *)0;

/* Oracle forward declarations */
extern SQLDA *sqlald();
extern void   sqlprc();
extern void   sqlnul();

/* Global variables for Oracle */
int   oraclePrecision;
int   oracleScale;
int   oracleNullOk;
short oracleIndicator;
int	Save_point;
VARCHAR mpvarcharfield[5000];

/* include def_table struct */
#include <mpdbglob.h>

/**************************************************************/
/* SQL globals                                                */
/**************************************************************/
extern unsigned char logging_sql;
extern unsigned char logging_sqltm;

char            logbuffer[RECLAENGE];
time_t          starttime;
unsigned int    trxcount;





/**************************************************************/
/* Function:  open db                                         */
/*                                                            */
/* Parameter: db path and name                                */
/* Return:    ERROR / MPSQL_OK                                */
/**************************************************************/
int MPAPIdb_connect(char *aDBname, char *aUsername, char *aPassword)
{
	extern unsigned int trxcount;
	int status=(int)MPSQL_OK;
	char oracleid[1024];

	/* init */
	trxcount = 0;

	/* error handling init */
	/* EXEC SQL WHENEVER SQLERROR DO errorfunc(); */

	/* The necessary string is in the data: for Oracle,
	 * it is a user@oracleservicename combination separated by
	 * a @ (ex. mw@piso)
	 */

	(void)sprintf(oracleid, "%s@%s", aUsername, aDBname);
	(void)sprintf(mpdb_dbname, "%s", aDBname);
	mpdb_user = oracleid;
	mpdb_passwd = aPassword;
	EXEC SQL CONNECT :mpdb_user IDENTIFIED BY :mpdb_passwd;

	status = MPAPIdb_checkstatus();
	if (logging_sql)
		{
		(void)sprintf(logbuffer, "OPEN DB %s", mpdb_dbname);
		MPlog(_LOGSQL, status, logbuffer, __FILE__);
		}

	return(status);
}

/**************************************************************/
/* Function:  release db and check sql state                  */
/*                                                            */
/* Parameter: void                                            */
/* Return:    ERROR / MPSQL_OK                                */
/**************************************************************/
int MPAPIdb_release(void)
{
	extern unsigned int trxcount;
	int status=(int)MPSQL_OK;

	signal(SIGCLD, SIG_IGN);

	EXEC SQL COMMIT WORK RELEASE;
	status=MPAPIdb_checkstatus();
	if (logging_sql)
		{
		(void)sprintf(logbuffer, "CLOSE DB %s - NUMBER OF TRX: %d", mpdb_dbname, trxcount);
		MPlog(_LOGSQL, status, logbuffer, __FILE__);
		}

	return(status);
}

/**************************************************************/
/* Function:  start a db transaction                          */
/*                                                            */
/* Parameter: void                                            */
/* Return:    ERROR / MPSQL_OK                                */
/**************************************************************/
int MPAPIdb_begintrx(int isolationlevel, int priority)
{
	extern unsigned int trxcount;
	extern time_t starttime;
	int status=(int)MPSQL_OK;

	switch(isolationlevel)
		{
		case SQLISOLATION_RR:
			EXEC SQL SET TRANSACTION READ WRITE;
			break;
		case SQLISOLATION_CS:
			EXEC SQL SET TRANSACTION READ WRITE;
			break;
		case SQLISOLATION_RC:
			EXEC SQL SET TRANSACTION ISOLATION LEVEL READ COMMITTED;
			break;
		case SQLISOLATION_RU:
			EXEC SQL SET TRANSACTION READ ONLY;
			break;
		default:
			EXEC SQL SET TRANSACTION READ WRITE;
			break;
		}

	status = MPAPIdb_checkstatus();
	if (logging_sql)
		{
		trxcount++;
		starttime = time(NULL);
		MPlog(_LOGSQL, status, "BEGIN TRANSACTION", __FILE__);
		}

	return(status);
}

/**************************************************************/
/* Function:  set attributes of a db trx in progress          */
/*                                                            */
/* Parameter: void                                            */
/* Return:    ERROR / MPSQL_OK                                */
/**************************************************************/
int MPAPIdb_settrx(int isolationlevel, int priority)
{
	int status=(int)MPSQL_OK;

	/* In Oracle SET TRANSACTION means begin trx, and that
      means we have to commit now and start in an other mode.
      That's not perfect, but for now it's OK */

	EXEC SQL COMMIT WORK;

	status=MPAPIdb_checkstatus();
	if (status != MPSQL_OK)
		return(status);

	switch(isolationlevel)
		{
		case SQLISOLATION_RR:
			EXEC SQL SET TRANSACTION READ WRITE;
			break;
		case SQLISOLATION_CS:
			EXEC SQL SET TRANSACTION READ WRITE;
			break;
		case SQLISOLATION_RC:
			EXEC SQL SET TRANSACTION ISOLATION LEVEL READ COMMITTED;
			break;
		case SQLISOLATION_RU:
			EXEC SQL SET TRANSACTION READ ONLY;
			break;
		default:
			EXEC SQL SET TRANSACTION READ WRITE;
			break;
		}

	status=MPAPIdb_checkstatus();
	if (logging_sql)
		MPlog(_LOGSQL, status, "CHANGED TRANSACTION ISOLATIONLEVEL", __FILE__);

	return(status);
}


/**************************************************************/
/* Function:  write data to db and set savepoint              */
/*                                                            */
/* Parameter: void                                            */
/* Return:    ERROR / MPSQL_OK                                */
/**************************************************************/
void MPAPIdb_committrx(void)
{
	extern time_t starttime;
	int status=(int)MPSQL_OK;

	EXEC SQL COMMIT WORK;

	status=MPAPIdb_checkstatus();
	if (logging_sql)
		{
		char textbuf[_RECORDLEN];
		sprintf(textbuf, "END TRANSACTION - TRANSACTION TIME: %f SECONDS",
		        (difftime(time(NULL), starttime)));
		MPlog(_LOGSQL, status, textbuf, __FILE__);
		}

	return;
}

/**************************************************************/
/* Function:  rollback/cancel current transaction             */
/*            started by begin_transaction()                  */
/*                                                            */
/* Parameter: void                                            */
/* Return:    ERROR / MPSQL_OK                                */
/**************************************************************/
void MPAPIdb_rollbacktrx(void)
{
	extern time_t starttime;
	int status=(int)MPSQL_OK;

	EXEC SQL ROLLBACK WORK;

	status = MPAPIdb_checkstatus();
	if (logging_sql)
		{
		char textbuf[_RECORDLEN];
		sprintf(textbuf, "CANCEL/ROLLBACK TRANSACTION - TRANSACTION TIME: %f SECONDS",
		        (difftime(time(NULL), starttime)));
		MPlog(_LOGSQL, status, textbuf, __FILE__);
		}

	return;
}

/**************************************************************/
/* Function:  write data to db and set savepoint              */
/*                                                            */
/* Parameter: void                                            */
/* Return:    ERROR / MPSQL_OK                                */
/**************************************************************/
int MPAPIdb_setsavepoint(int *save_point)
{
	int status = (int) MPSQL_OK;

	EXEC SQL SAVEPOINT Save_point;
	status = MPAPIdb_checkstatus();
	*save_point = Save_point;

	if (logging_sql)
		MPlog(_LOGSQL, status, "SAVEPOINT SET", __FILE__);

	return( status );
}

/**************************************************************/
/* Function:  delete work back to the next savepoint          */
/*                                                            */
/* Parameter: savepoint                                       */
/* Return:    ERROR / MPSQL_OK                                */
/**************************************************************/
int MPAPIdb_rollbacksavepoint(int *save_point )
{
	int status = (int) MPSQL_OK;

	Save_point = *save_point;
	EXEC SQL ROLLBACK WORK TO SAVEPOINT Save_point;
	status = MPAPIdb_checkstatus();

	if (logging_sql)
		MPlog(_LOGSQL, status, "ROLLBACK", __FILE__);

	return(status);
}

/*F***********************************************************
 * Function:  commit a sql command to db and put the data     
 *            to the global memory
 *                                                            
 * Parameter: void                                            
 * Return:    ERROR / MPSQL_OK                                
 *************************************************************/
int MPAPIdb_sqlquery(int table_nr, char **dataTargetPtr, char *queryString,
                   int *queryCount, unsigned long *datalen, unsigned long *alloclen)
{
	extern int DebugFlag;

	time_t aclock;
	char logtext[_RECORDLEN];

	int status=(int)MPSQL_OK;
	int sqlStatus = (int)MPSQL_OK;

	int 	 currentOffset = (int)0;		/* Offset into output buffer */
	int 	 fetchCount    = (int)0;		/* Loop counter for copying data */
	size_t fetchSize     = (size_t)0;	/* size of data retrieved */
	size_t dataSize      = (size_t)0;	/* total size of converted data */
	size_t allocsize     = (size_t)0;   /* memory to allocate */
	int    columnCount   = 0;				/* Column counter */

	short  tempShort  = (short)0;
	int    tempInt    = (int)0;
	long   tempLong   = (long)0L;
	double tempDouble = (double)0.0;
	float  tempFloat  = (float)0.0;
	char   dummy[1024];

#ifdef ORACLEDEBUG
/*###################### debug begin ######*/
int aaa, aai;
for (aai = aaa = 0; aai < def_table[table_nr].sqln; aai++)
	aaa += def_table[table_nr].elements[aai].leng;
if (def_table[table_nr].sqlrowlen != aaa)
	{
	printf("table=[%s], sqlrowlen=%d, sum=%d",def_table[table_nr].name,
	       def_table[table_nr].sqlrowlen,aaa);
	printf("  ungleich !!\n");
	}
/* printf("tablenr: %d sqlstring: %s\n\n", table_nr, queryString); */
/*###################### debug end ######*/
#endif


	/* index of SQL statements */
	/* 1) PREPARE sqlstmt FROM string */
	/* 2) DECLARE crs CURSOR FOR sqlstmt */
	/* 3) DESCRIBE BIND VARIABLES FOR sqlstmt INTO bindP */
	/* 4) OPEN crs USING DESCRIPTOR bindP */
	/* 5) DESCRIBE sqlstmt INTO selectP */
	/* 6) FETCH crs USING DESCRIPTOR selectP */
	/* 7) CLOSE crs */

	/* init */
	mpdb_sqlquery = queryString;
	*queryCount = 0;
	*dummy = NULL;

	/* Wenn Query mit ';' abgeschlossen wurde dieses abschneiden */
	truncSemicolon(mpdb_sqlquery);

	/* init logging */
	if (logging_sql)
		aclock = time(NULL);

	/* check pointer */
	if (dataTargetPtr == (char **)NULL)
		return(MPDBERROR);

	/* Allocate the bind descriptor */
	if (AllocateDescriptors() == -1)
		return(MPDBERROR);
	bindDP->N = def_table[table_nr].sqln;

	/* Prepare the sql query. */
	EXEC SQL PREPARE MPSQLQUERY FROM :mpdb_sqlquery;
	sqlStatus = MPAPIdb_checkstatus();
	if (sqlStatus != (int) MPSQL_OK )
		return( sqlStatus );

	/* Declare a dynamic cursor. (This may not be necessary.) */
	EXEC SQL DECLARE dynam_cursor CURSOR FOR MPSQLQUERY;
	sqlStatus = MPAPIdb_checkstatus();
	if ( sqlStatus != (int) MPSQL_OK )
		return( sqlStatus );

	/* set bind descriptor */
	EXEC SQL DESCRIBE BIND VARIABLES FOR MPSQLQUERY INTO bindDP;
	sqlStatus = MPAPIdb_checkstatus();
	if ( sqlStatus != (int)MPSQL_OK)
		return( sqlStatus );
	/* If ->F < 0, then there is a mismatch between
	 * the requested and actual SLI's */
	if ( bindDP->F < 0 )
		{
		sprintf( mpdb_msg,
		         "Too many bind variables: bindDP->F = %d, sqlcode = %d\n",
		         bindDP->F, sqlca.sqlcode );
		(void) MPAPIdb_checkstatus();
		return( sqlca.sqlcode );
		}
	bindDP->N = bindDP->F;	/* Reset ->F to ->N */

	/* Open the cursor. */
	EXEC SQL OPEN dynam_cursor USING DESCRIPTOR bindDP;
	sqlStatus = MPAPIdb_checkstatus();
	if ( sqlStatus != (int) MPSQL_OK )
		return( sqlStatus );

	/* Describe the select list. */
	EXEC SQL DESCRIBE MPSQLQUERY INTO selectDP;
	sqlStatus = MPAPIdb_checkstatus();
	if ( sqlStatus != (int) MPSQL_OK )
		return( sqlStatus );
	if ( selectDP->F < 0 )
		{
		sprintf( mpdb_msg,
		         "Too many select-list items. selectDP->F: %d, sqlcode: %d\n", 
		         selectDP->F, sqlca.sqlcode );
		(void) MPAPIdb_checkstatus();
		return( sqlca.sqlcode );
		}

	/* Reset requested to actual # of select list items. */
	selectDP->N = selectDP->F;

	/******************
	* start for loop
	******************/
	for (fetchCount = 0; fetchCount < selectDP->F; fetchCount++)
		{
		/*********************************************************
		* The switch sets the length of the data type.
		* selectDP->sqltype is a pointer to an array of shorts.
		*********************************************************/
		switch( selectDP->T[fetchCount] & STRIPHIGHBIT )
			{
			/*************
			* Char Type
			*************/
			case OracleCharType:
				break;
			case OracleVarCharType:
				break;

			/************
			* Int Type
			*
			* mw 22.2.2002 with SQLNumberPrecV6() you extract now precision and scale
			************/
			case OracleNumType:		/* number dataType */
				SQLNumberPrecV6(SQL_SINGLE_RCTX, (unsigned long *)&(selectDP->L[fetchCount] ),
					&oraclePrecision, &oracleScale);
				if ( oraclePrecision == 0 )
					{
					oraclePrecision = 40;
					}
				selectDP->L[fetchCount] = oraclePrecision + 2;
				if ( oracleScale < 0 )
					{
					selectDP->L[fetchCount] += -oracleScale;
					}
				selectDP->T[fetchCount] = 1;
				break;

			/**************
			* Float Type
			**************/
			case OracleLongType:		/* long dataType. */
				/* -- !NOTE THIS IS NOT THE SAME AS long IN C! -- */
				selectDP->L[fetchCount] = 240;
				break;

			case OracleRowIdType:		/* rowid dataType */
				selectDP->L[fetchCount] = 18;
				selectDP->T[fetchCount] = 1;
				break;
			case OracleDateType:		/* date dataType */
				selectDP->L[fetchCount] = 9;
				selectDP->T[fetchCount] = 1;
				break;
			case OracleRawType:		/* raw dataType */
			case OracleLongRawType:		/* long raw dataType */
				selectDP->L[fetchCount] = 240;
				break;

			/***********************************
			* defualt = unbekannter DatenType
			***********************************/
			default:
				err_ret("Bad value %d for data type detected (bind descriptor).\n\
				        Data descriptor element %d value %d\n",
				        selectDP->T[fetchCount] & STRIPHIGHBIT, fetchCount,
				        def_table[table_nr].elements[fetchCount].typ );
				return( -1 );
				break;
			} /* end switch */
		} /* end for loop */

	/*****************************************
	* Now, fetch the data. This loop breaks
	* when sqlca.sqlcode = MPSQL_END_OF_TABLE is reached.
	*****************************************/
	while(sqlca.sqlcode != MPSQL_END_OF_TABLE)
		{
		EXEC SQL FETCH dynam_cursor USING DESCRIPTOR selectDP;
		sqlStatus = MPAPIdb_checkstatus();
		if ( sqlStatus != (int) MPSQL_OK )
			{
			if ( sqlStatus == (int)2000 ) /* NO_DATA_FOUND */
				{
				sqlStatus = (int)0;
				break;
				}
			else
				return( sqlStatus );
			}
		else if ( sqlca.sqlcode == (int) MPSQL_END_OF_TABLE )
			break;

		/**************************************************
		* Process select list values. 
		* Calculate the fetched size, allocate memory,
		* and copy data into the buffer. This assumes
		* the columns are specified in the same order as
		* the goal structure in the calling function.
		**************************************************/

		/* if there are no columns go to the next fetch */
		if (selectDP->F <= (int)0) /* selectDP->F is number of columns */
			continue;

		/* Increment the number of records retrieved */
		(*queryCount)++;

		/* Allocate more space if needed */
		allocsize = (size_t)(*queryCount) * (size_t)def_table[table_nr].sqlrowlen;
		if (allocsize > (size_t)*alloclen)
			*dataTargetPtr = (char *)MPalloc((void *)*dataTargetPtr, alloclen,
			          SQLMEMCHUNK, allocsize, sizeof(char));

		/************************************************
		* Working column by column,
		* sum the lengths of the fetched data, and
		* copy the data. Note that Oracle seems
		* to present everything as a character string.
		*
		* make loop over def_table.sqln instead of
		* selectDP->sqld ! In Oracle def_table.sqln HAS
		* NOT TO BE THE SAME AS selectDP->sqld, because
		* of the NULLIND fields !
		************************************************/
		for (columnCount = fetchCount = 0; fetchCount < def_table[table_nr].sqln; fetchCount++)
			{
			oracleIndicator = *selectDP->I[columnCount];
			switch( def_table[table_nr].elements[fetchCount].typ )
				{
				case DB_CHAR:
					/***************************************************************
					* The length is the size in selectDP->sqlvar[fetchCount].sqldata
					****************************************************************/
					fetchSize = (size_t) ((selectDP->L[columnCount] <
					            def_table[table_nr].elements[fetchCount].leng) ?
					            selectDP->L[columnCount] :
					            def_table[table_nr].elements[fetchCount].leng );

					/**************************************************
					* dataSize should always be incremented by
					* the size specified in the dataMap, so that
					* the structure expected by the calling function
					* is properly set up.
					**************************************************/
					dataSize += def_table[table_nr].elements[fetchCount].leng;
						(void)memset((void *)(*dataTargetPtr + currentOffset),
						       NULL, def_table[table_nr].elements[fetchCount].leng);
					if ( oracleIndicator != SQLNULL )
						{
						(void)memcpy((void *) (*dataTargetPtr + currentOffset ),
						               (void *) selectDP->V[columnCount], fetchSize);
						(*dataTargetPtr)[currentOffset + fetchSize-1] = '\0';
						}
					else
						{
						(void)memset((void *)(*dataTargetPtr + currentOffset),
						            NULL, fetchSize);
						}

					/*******************************************
					* Current Offset should be incremented by
					* the amound specified in the dataMap.
					*******************************************/
					currentOffset += def_table[table_nr].elements[fetchCount].leng;
					break;

				case DB_SHORT:
					fetchSize=(size_t)def_table[table_nr].elements[fetchCount].leng;
					dataSize += fetchSize;
					if ( oracleIndicator != SQLNULL )
						{
						(void)memcpy( (void *)&tempShort,
						        selectDP->V[columnCount],
						        selectDP->L[columnCount]);

						(void)memcpy( (void *) (*dataTargetPtr + currentOffset ),
						               (void *) &tempShort, sizeof(short) );
						}
					else
						{
						(void)memset( (void *) (*dataTargetPtr + currentOffset ),
						               0x00, fetchSize );
						}

					currentOffset += (int) fetchSize;
					break;

				case DB_INT:
					fetchSize=(size_t)def_table[table_nr].elements[fetchCount].leng;
					dataSize += fetchSize;
					if ( oracleIndicator != SQLNULL )
						{
						(void)memcpy((void *)&dummy, selectDP->V[columnCount],
						      selectDP->L[columnCount]);
						dummy[selectDP->L[columnCount]] = (char)NULL;
						tempInt = atoi( dummy );
						(void)memcpy((void *)(*dataTargetPtr + currentOffset),
						      (void *)&tempInt, sizeof(int));
						}
					else
						{
						(void)memset((void *)(*dataTargetPtr + currentOffset), 0x00, fetchSize);
						}
					currentOffset += (int) fetchSize;
					break;

				case DB_LONG:
					fetchSize=(size_t)def_table[table_nr].elements[fetchCount].leng;
					dataSize += fetchSize;
					if ( oracleIndicator != SQLNULL )
						{
						(void)memcpy((void *)&dummy, selectDP->V[columnCount],
								selectDP->L[columnCount]);
						dummy[selectDP->L[columnCount]] = (char)NULL;
						tempLong = atol( dummy );
						(void) memcpy( (void *) (*dataTargetPtr + currentOffset ),
					               	(void *) &tempLong, sizeof(long) );
						}
					else
						{
						tempLong = 0L;
						(void)memset((void *)(*dataTargetPtr + currentOffset), 0x00, fetchSize);
						}		
					currentOffset += (int) fetchSize;
					break;

				case DB_DOUBLE:
					fetchSize=(size_t)def_table[table_nr].elements[fetchCount].leng;
					dataSize += fetchSize;

					if ( oracleIndicator != SQLNULL )
						{
						(void)memcpy((void *)&dummy, selectDP->V[columnCount],
						      selectDP->L[columnCount]);
						dummy[selectDP->L[columnCount]] = (char)NULL;
						tempDouble=(double)strtod(dummy,(char **)0);
					   (void) memcpy((void *)(*dataTargetPtr + currentOffset),
					                 (void *)&tempDouble, sizeof(double));
						}
					else
						{
						tempDouble = 0L;
						(void)memset((void *)(*dataTargetPtr + currentOffset), 0x00, fetchSize);
						}
					currentOffset += (int) fetchSize;
					break;

				case DB_FLOAT:
					fetchSize=(size_t)def_table[table_nr].elements[fetchCount].leng;
					dataSize += fetchSize;
					if ( oracleIndicator != SQLNULL )
						{
						(void)memcpy((void *)&dummy, selectDP->V[columnCount],
								selectDP->L[columnCount]);
						dummy[selectDP->L[columnCount]] = (char)NULL;
						tempFloat=(float)strtod(dummy, (char **)0 );
						(void) memcpy( (void *) (*dataTargetPtr + currentOffset ),
					               	(void *) &tempFloat, sizeof(float) );
						}
					else
						{
						tempFloat = 0L;
						(void)memset((void *)(*dataTargetPtr + currentOffset), 0x00, fetchSize);
						}
					currentOffset += (int) fetchSize;
					break;

				/************************************************************
				* bull shit ! NULL fields don't have a extra information in
            * the returning buffer of the fetch ! So, we init the memory
            * region to NULL. I need this because of HP/Allbase and I
            * think of ORACLE.
	    		*
				* mw 22.2.2002 Oracle 8i or higher has a function
				* SQLColumnNullCheck() which could do the job - probably
				* in a next release of this DB API module.
				*************************************************************/
				case DB_NULLIND:
					fetchSize=(size_t)def_table[table_nr].elements[fetchCount].leng;
					dataSize += fetchSize;
					(void)memset((void *)(*dataTargetPtr + currentOffset), NULL, fetchSize);
					currentOffset += (int)fetchSize;
					break;

				/*****************
				* date dataType IS NOT SUPPORTED YET !!
				*****************/
				case DB_DATE:
					sprintf( mpdb_msg, "%s\t",
					         selectDP->V[columnCount] );
					break;

				default:
					err_ret("Bad value %d for data type detected(select descriptor).\n",
					        def_table[table_nr].elements[fetchCount].typ);
					return( -1 );
					break;
				}	/* end switch type of column */
				if ( def_table[table_nr].elements[fetchCount].typ != DB_NULLIND )
					 columnCount ++;
			} /* end of columns for loop */
      
			if (sqlStatus != SQLOK)
				*queryCount = (int) 0;
		} /* end of fetch while loop */

	/*****************************************
	 * Note that memory is never free'd, but
	 * reused next time around, to prevent
	 * breaking it up into unusable chunks.
	 *****************************************/

	/* Close cursor and exit */
	EXEC SQL CLOSE dynam_cursor;

	if (logging_sql)
		{
		sprintf(logtext, "QUERY EXECUTION TIME IS %f SECONDS",
			(difftime(time(NULL), aclock)));
		MPlog(_LOGSQL, status, logtext, __FILE__);
		MPlog(_LOGSQL, status, queryString, __FILE__);
		}

	/* set right datalen */
	*datalen = (unsigned long)dataSize;

	/* and return with status */
	return(sqlStatus);
}

/**************************************************************/
/* Function:  commit RDBMS command                            */
/*                                                            */
/* Parameter: void                                            */
/* Return:    ERROR / MPSQL_OK                                */
/**************************************************************/
int MPAPIdb_sqlcommand(char *command_string, int *anzahl)
{
	extern int DebugFlag;

	int status=(int)MPSQL_OK;

	time_t aclock;
	char logtext[_RECORDLEN];

	/* init */
	*anzahl = 0;
	mpdb_sqlquery = command_string;
	if (logging_sql)
		aclock = time(NULL);

	/* Wenn Query mit ';' abgeschlossen wurde dieses abschneiden */
	truncSemicolon(mpdb_sqlquery);

	EXEC SQL EXECUTE IMMEDIATE :mpdb_sqlquery;

	status = MPAPIdb_checkstatus();
	if (status == (int)MPSQL_OK)
		{
		/*
		* This field holds the number of rows processed
		* by the most recently executed SQL statement.
		*/
		*anzahl = (int)sqlca.sqlerrd[2];
		}

	if (logging_sql)
		{
		sprintf(logtext, "COMMAND EXECUTION TIME IS %f SECONDS",
		        (difftime(time(NULL), aclock)));
		MPlog(_LOGSQL, status, logtext, __FILE__);
		MPlog(_LOGSQL, status, command_string, __FILE__);
		}

	return status;
}




/* local functions (static) */

/*SF***********************************************************/
/* Function:  check sql state                                 */
/*                                                            */
/* Parameter: void                                            */
/* Return:    ERROR / MPSQL_OK                                */
/**************************************************************/
static int check_sql_error( void );
static int MPAPIdb_checkstatus(void)
{
	int status;
	int ret_status = (int) MPSQL_OK;

	status = check_sql_error();
	ret_status = ( abs( status ) > abs( ret_status ) ) ? status : ret_status;

	return( ret_status );
}
static int check_sql_error( void )
{
	int status = (int) MPSQL_OK;
	char WorkBuf[64];
	int  BufferSize = 200;
	int  MessageLength = 0;

	if ( sqlca.sqlcode != MPSQL_OK && sqlca.sqlcode != MPSQL_END_OF_TABLE )
		{
		sqlca.sqlerrm.sqlerrmc[sqlca.sqlerrm.sqlerrml] = '\0';
		sqlglm( mpdb_msg, &BufferSize, &MessageLength );
		mpdb_msg[MessageLength] = '\0';
		if ( strcmp( mpdb_msg, sqlca.sqlerrm.sqlerrmc ) )
			{
			sqlca.sqlerrm.sqlerrmc[sqlca.sqlerrm.sqlerrml] = '\n';
			(void)sprintf( mpdb_msg +
			               sqlca.sqlerrm.sqlerrmc[sqlca.sqlerrm.sqlerrml], "%s\n",
			               mpdb_msg);
			UtilMsgWrite(mpdb_sqlmsg);
			}
		return(sqlca.sqlcode);
		}

	return status;
}



/*SF****************************************************************
 *
 * AllocateDescriptors allocates the bind and select descriptors.
 * The values should not be hardcoded!
 *
 ******************************************************************/
static int AllocateDescriptors ( void )
{
	static long   bindFvalue   = 0L;
	static long   selectFvalue = 0L;
	int           status       = (int) MPSQL_OK;
	short        *workPtr      = (short *)0;
	char         *VworkPtr     = (char *)0;
	int           i            = 0;

	if ( bindDP == (SQLDA *)0 )
	{
		bindDP = sqlald( 100, 40, 20 );
		if ( bindDP == (SQLDA *)0 )
		{
			return( -1 );
		}
		bindFvalue = bindDP->F;
	}

	bindDP->N = 100;
	bindDP->F = bindFvalue;

	if ( selectDP == (SQLDA *)0 )
	{
		selectDP = sqlald( 100, 40, 0 );
		if ( selectDP == (SQLDA *)0 )
		{
			return( -1 );
		}
		selectFvalue = selectDP->F;

		/*
		* Allocate space for the data values
		* and the indicator values.
		*/
      
		workPtr = (short *)calloc( selectDP->N, sizeof( short ) );
		VworkPtr = (char *) calloc( selectDP->N, LOC_ARBITRARY_SELECT_LIST_SIZE );
		for ( i = 0; i < selectDP->N; i++ )
		{
			selectDP->I[i] = workPtr;
			workPtr += sizeof( short );
			selectDP->V[i] = VworkPtr;
			VworkPtr += LOC_ARBITRARY_SELECT_LIST_SIZE;
		}
	}

	selectDP->N = 100;
	selectDP->F = selectFvalue;

	return( status );
}



/*SF****************************************************************
 *
 * Hat ein SQL-Statement zum Abschluss ein ; so muss dieses ab-
 * geschnitten werden.
 *
 ******************************************************************/
static void truncSemicolon ( char *sqlquery )
{
	int i;

	if ( strlen(sqlquery) > 0 ) {
		for ( i = strlen(sqlquery)-1; i >= 0; i-- ) {
			if (sqlquery[i] == ';') {
				sqlquery[i] = '\0';
				break;
			}
		}
	}
}
