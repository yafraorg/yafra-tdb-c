/*D***********************************************************
 * modul:     SQL INTERFACE all DB access functions
 *
 * db:        Oracle OCI interface
 *
 * copyright: yafra.org, Switzerland
 *************************************************************/
static char rcsid[]="$Header: /yafra/cvsroot/mapo/source/api/dboci.ora,v 1.2 2004-02-07 13:52:54 mwn Exp $";

#include "version.h"

#if !defined(MPDBORACLE)
#undef MPDBODBC
#undef MPDBINGRES
#undef MPDBHPSQL
#define MPDBORACLE
#endif

/* MARCO POLO includes */
#include <mpdb.h>      /* Includefile fuer die Relationalen Datenbanken */
#include <mpmain.h>    /* Includefile fuer MARCO-POLO */
#include <mpproapi.h>  /* Prototypes fï¿½r ANSI-C */
#include <mpprolib.h>

/* Oracle OCI includes */
#include <oci.h>

/* local prototyps */
static void MPAPIdb_truncate_blanks(char *);
static int MPAPIdb_checkstatus(sword, OCIError *);
static int AllocateDescriptors ( void );
static void truncSemicolon ( char * );

/* some defines */
#define		SQL_MESSAGE	132
#define		SQL_NAME	128
#define		SQL_MAX_COL	50
#define		SQL_MAX_ROW_LEN	512
#define		SQL_MAX_ROW	50
#define		SQL_MAX_BUF	SQL_MAX_ROW_LEN*SQL_MAX_ROW
#define     SQLMEMCHUNK 102400
#define		MP_MAXCOLS 50
#define		MP_ALLOCROWS 10
#define		MP_MAXSTRINGLEN 2002

/**************************************************************/
/* SQL globals                                                */
/**************************************************************/
/* include def_table struct */
#include <mpdbglob.h>

extern unsigned char logging_sql;
extern unsigned char logging_sqltm;

/* logging variables */
char            logbuffer[RECLAENGE];
time_t          starttime;
unsigned int    trxcount;

char     DBE_Name[SQL_NAME + 1];           /* SQL_NAME + 1 */
char     errorMessageBuffer[2048];
char     IngresMSGbuffer[RECLENGTH];	/* Fehlermeldungen des Systems */
int      MessageNumber;	            /* Fehlernummer des Systems */

/* can I still use this ?? */
int     Save_point;

/* OCI handles */
static OCIEnv *mp_ocienv;       /* the environment handle */
static OCISvcCtx *mp_ociservice;    /* the  service handle */
static OCIError *mp_ocierr;     /* the error handle */
static OCIStmt *mp_ocistmt;
static OCIDefine *mp_ocidefine[MP_MAXCOLS];

#define OCI_ErrorCheck {if (oci_ret != OCI_SUCCESS && oci_ret != OCI_SUCCESS_WITH_INFO) \
					{ \
					status = MPAPIdb_checkstatus(oci_ret, mp_ocierr); \
					return(status); \
					} \
					}




/**************************************************************/
/* Function:  open db                                         */
/*                                                            */
/* Parameter: db path and name                                */
/* Return:    ERROR / MPSQL_OK                                */
/**************************************************************/
int MPAPIdb_connect(char *aDBname, char *aUsername, char *aPassword)
{
	sword oci_ret;
	text oci_user;
	ub4 oci_strlen1;
	ub4 oci_strlen2;
	ub4 oci_strlen3;
	char errbuf[100];
	int errcode;
	int status = (int)MPSQL_OK;

	/* initialize the mode to be the threaded and object environment */
	oci_ret = OCIEnvCreate(&mp_ocienv, OCI_DEFAULT, (dvoid *)0,
		0, 0, 0, (size_t) 0, (dvoid **)0);
	OCI_ErrorCheck;
	
	/* allocate a service handle */
	oci_ret = OCIHandleAlloc((dvoid *)mp_ocienv, (dvoid **)&mp_ociservice,
		OCI_HTYPE_SVCCTX, 0, (dvoid **) 0);
	OCI_ErrorCheck;

	/* allocate an error handle */
	oci_ret = OCIHandleAlloc ((dvoid *)mp_ocienv, (dvoid **)&mp_ocierr,
		OCI_HTYPE_ERROR, 0, (dvoid **) 0);
	OCI_ErrorCheck;

	/* Connect to database server */
	oci_strlen1 = (ub4)strlen(aUsername);
	oci_strlen2 = (ub4)strlen(aPassword);
	oci_strlen3 = (ub4)strlen(aDBname);
	oci_ret = OCILogon(mp_ocienv, mp_ocierr, &mp_ociservice, (text *)aUsername, oci_strlen1,
		(text *)aPassword, oci_strlen2, (text *)aDBname, oci_strlen3);
	OCI_ErrorCheck;

	/* print logging */
	if (logging_sql)
		{
		(void)sprintf(logbuffer, "OPEN DB %s", aDBname);
		MPlog(_LOGSQL, status, logbuffer, __FILE__);
		}

	return(status);
}

/**************************************************************/
/* Function:  release db and check sql state                  */
/*                                                            */
/* Parameter: void                                            */
/* Return:    ERROR / MPSQL_OK                                */
/**************************************************************/
int MPAPIdb_release(void)
{
	int status = (int)MPSQL_OK;
	sword oci_ret;

	/* Disconnect */
	oci_ret = OCILogoff(mp_ociservice, mp_ocierr);
	OCI_ErrorCheck;

	/* Free handles */
/**
	oci_ret = OCIHandleFree((dvoid *)mp_ocistmt, OCI_HTYPE_STMT);
	oci_ret = OCIHandleFree((dvoid *)mp_ociservice, OCI_HTYPE_SVCCTX);
**/
	oci_ret = OCIHandleFree((dvoid *)mp_ocierr, OCI_HTYPE_ERROR);
	if (oci_ret != OCI_SUCCESS && oci_ret != OCI_SUCCESS_WITH_INFO)
		status = MPAPIdb_checkstatus(oci_ret, mp_ocierr);

	/* print logging */
	if (logging_sql)
		{
		(void)sprintf(logbuffer, "CLOSE DB %s - NUMBER OF TRX: %d",
		              DBE_Name, trxcount);
		MPlog(_LOGSQL, status, logbuffer, __FILE__);
		}

	return(status);
}


/**************************************************************/
/* Function:  start a db transaction with isolation level     */
/* You may submit one of the following orace sql commands:    */
/* - set transaction read only                                */
/* - set transaction read write                               */
/* - set transaction isolation level serializable             */
/* - set transaction isolation level read committed           */
/*                                                            */
/* Parameter: void                                            */
/* Return:    MPSQL_ERROR / MPSQL_OK                          */
/**************************************************************/
int MPAPIdb_begintrx(int isolationlevel, int priority)
{
	extern unsigned int trxcount;
	extern time_t starttime;
	sword oci_ret;
	int status = (int)MPSQL_OK;
/*
	switch(isolationlevel)
		{
		case SQLISOLATION_RR:
			oci_ret = OCITransStart(mp_ociservice, mp_ocierr, 90, OCI_TRANS_NEW);
			break;
		case SQLISOLATION_CS:
			oci_ret = OCITransStart(mp_ociservice, mp_ocierr, 90, OCI_TRANS_NEW);
			break;
		case SQLISOLATION_RC:
			oci_ret = OCITransStart(mp_ociservice, mp_ocierr, 90, OCI_TRANS_NEW);
			break;
		case SQLISOLATION_RU:
			/* oci_ret = OCITransStart(mp_ociservice, mp_ocierr, 90, OCI_TRANS_READONLY);
			oci_ret = OCITransStart(mp_ociservice, mp_ocierr, 90, OCI_TRANS_NEW);
			break;
		default:
			oci_ret = OCITransStart(mp_ociservice, mp_ocierr, 90, OCI_TRANS_NEW);
			break;
		}
	if (oci_ret != OCI_SUCCESS && oci_ret != OCI_SUCCESS_WITH_INFO)
		status = MPAPIdb_checkstatus(oci_ret, mp_ocierr);
*/
	if (logging_sql)
		{
		trxcount++;
		starttime = time(NULL);
		MPlog(_LOGSQL, status, "BEGIN TRANSACTION", __FILE__);
		}

	return( status );
}


/**************************************************************/
/* Function:  set attributes of a db trx in progress          */
/*                                                            */
/* Parameter: void                                            */
/* Return:    ERROR / MPSQL_OK                                */
/**************************************************************/
int MPAPIdb_settrx(int isolationlevel, int priority)
{
	int status=(int)MPSQL_OK;

	switch(isolationlevel)
		{
		case SQLISOLATION_RR:
			break;
		case SQLISOLATION_CS:
			break;
		case SQLISOLATION_RC:
			break;
		case SQLISOLATION_RU:
			break;
		default:
			break;
		}

	if (logging_sql)
		MPlog(_LOGSQL, status, "CHANGED TRANSACTION ISOLATIONLEVEL", __FILE__);

	return(status);
}


/**************************************************************/
/* Function:  write data to db and set savepoint              */
/*                                                            */
/* Parameter: void                                            */
/* Return:    ERROR / MPSQL_OK                                */
/**************************************************************/
void MPAPIdb_committrx(void)
{
	int status = (int)MPSQL_OK;
	sword oci_ret;

	oci_ret = OCITransCommit(mp_ociservice, mp_ocierr, (ub4)0);
	if (oci_ret != OCI_SUCCESS && oci_ret != OCI_SUCCESS_WITH_INFO)
		status = MPAPIdb_checkstatus(oci_ret, mp_ocierr);

	if (logging_sql)
		{
		char textbuf[_RECORDLEN];
		sprintf (textbuf, "END TRANSACTION - TRANSACTION TIME: %f SECONDS",
		        (difftime(time(NULL), starttime)));
		MPlog(_LOGSQL, status, textbuf, __FILE__);
		}

	return;
}

/**************************************************************/
/* Function:  rollback/cancel current transaction             */
/*            started by begin_transaction()                  */
/*                                                            */
/* Parameter: void                                            */
/* Return:    ERROR / MPSQL_OK                                */
/**************************************************************/
void MPAPIdb_rollbacktrx(void)
{
	extern time_t starttime;
	int status=(int)MPSQL_OK;
	sword oci_ret;

	oci_ret = OCITransRollback(mp_ociservice, mp_ocierr, (ub4)0);
	if (oci_ret != OCI_SUCCESS && oci_ret != OCI_SUCCESS_WITH_INFO)
		status = MPAPIdb_checkstatus(oci_ret, mp_ocierr);

	if (logging_sql)
		{
		char textbuf[_RECORDLEN];
		sprintf(textbuf, "CANCEL/ROLLBACK TRANSACTION - TRANSACTION TIME: %f SECONDS",
		        (difftime(time(NULL), starttime)));
		MPlog(_LOGSQL, status, textbuf, __FILE__);
		}

	return;
}

/**************************************************************/
/* Function:  write data to db and set savepoint              */
/*                                                            */
/* Parameter: void                                            */
/* Return:    ERROR / MPSQL_OK                                */
/**************************************************************/
int MPAPIdb_setsavepoint(int *save_point)
{
	/*******************
	* Local variables
	*******************/
	int status = (int) MPSQL_OK;

	/* EXEC SQL SAVEPOINT Save_point; */
	/* status = MPAPIdb_checkstatus(); */
	*save_point = Save_point;

	if (logging_sql)
		MPlog(_LOGSQL, status, "SAVEPOINT SET", __FILE__);

	return( status );
}


/**************************************************************/
/* Function:  delete work back to the next savepoint          */
/*                                                            */
/* Parameter: savepoint                                       */
/* Return:    ERROR / MPSQL_OK                                */
/**************************************************************/
int MPAPIdb_rollbacksavepoint(int *save_point )
{
	int status = (int) MPSQL_OK;

	Save_point = *save_point;
	/* EXEC SQL ROLLBACK WORK TO Save_point; */
	/* status = MPAPIdb_checkstatus(); */

	if (logging_sql)
		MPlog(_LOGSQL, status, "ROLLBACK", __FILE__);

	return(status);
}


/*F***********************************************************
 * Function:  commit a sql command to db and put the data
 *            to the global memory
 *
 * Parameter: void
 * Return:    ERROR / MPSQL_OK
 *************************************************************/
int MPAPIdb_sqlquery(int table_nr, char **mp_sqltargetptr, char *mp_sqlquery,
       int  *mp_rowcount, unsigned long *datalen, unsigned long *alloclen)
{
	/* define return codes */
	sword	oci_ret;
	int status = (int)MPSQL_OK;

	/* define temporary vars */
	int		i;
	sword		nresultcols;
	size_t	querySize;
	size_t	copysize;
	size_t	structsize;
	int		structcnt;
	int		memoff = (int)0;			/* Offset into output buffer */
	size_t	allocsize  = (size_t)0;	/* memory to allocate */

	/* local OCI vars */
	OCIParam *mp_ociparam;
	ub2 col_dtype[MP_MAXCOLS];
	ub4 oci_num[MP_MAXCOLS];
	int int_data;
	double double_data;
	text oci_dat[41][MP_MAXCOLS];
	text oci_string[MP_MAXSTRINGLEN][MP_MAXCOLS];
	sb4	char_len[MP_MAXCOLS];
	sb2	nullable[MP_MAXCOLS];
	ub4	null_len;
	int int_nullable;
	ub1	oci_precision;
	sb1	oci_scale;
	ub2	char_ocisize;

	/* logging */
	time_t aclock;
	char logtext[_RECORDLEN];

	/* init */
	null_len = (ub4)sizeof(nullable[0]);
	*mp_rowcount = 0;

	/* alloc handle for a SQL statement */
	oci_ret = OCIHandleAlloc((dvoid *)mp_ocienv, (dvoid **)&mp_ocistmt,
		OCI_HTYPE_STMT, (size_t)0, (dvoid **)0);
	OCI_ErrorCheck;

	/* start time logging */
	if (logging_sql)
		aclock = time(NULL);

	/*****************************************
	* If mp_sqltargetptr = (char **)0, then this
	* is not a query, this is a major bug.
	*****************************************/
	if (mp_sqltargetptr == (char **)NULL)
		return(MPERROR);

	/* check termination of query string */
	querySize = strlen(mp_sqlquery);
	if (mp_sqlquery[querySize - 1] == ';')
		{
		mp_sqlquery[querySize - 1] = '\0';
		querySize--;
		}

	/* prepare SQL statement */
	oci_ret = OCIStmtPrepare(mp_ocistmt, mp_ocierr, mp_sqlquery, (ub4)querySize,
		(ub4)OCI_NTV_SYNTAX, (ub4)OCI_DEFAULT);
	OCI_ErrorCheck;

	oci_ret = OCIStmtExecute(mp_ociservice, mp_ocistmt, mp_ocierr, (ub4)0, (ub4)0,
		(CONST OCISnapshot *)NULL, (OCISnapshot *)NULL, OCI_DEFAULT);
	OCI_ErrorCheck;


	/* get number of columns per table and bind the output vars to them (describing) */
	/* Get the number of columns in the query */
	oci_ret = OCIAttrGet(mp_ocistmt, OCI_HTYPE_STMT, &nresultcols, 0,
		OCI_ATTR_PARAM_COUNT, mp_ocierr);
	OCI_ErrorCheck;

	/* go through the column list and retrieve the data type of each column. We
	start from pos = 1 */
	for (i=0; i<nresultcols; i++)
		{
		/* get parameter for column i+1 (starts at 1 not at 0) */
		oci_ret = OCIParamGet(mp_ocistmt, OCI_HTYPE_STMT, mp_ocierr, (dvoid **)&mp_ociparam,
			(ub4)i+1);
		/* get data-type of column i */
		oci_ret = OCIAttrGet(mp_ociparam, OCI_DTYPE_PARAM, &col_dtype[i], (ub4 *)0,
			OCI_ATTR_DATA_TYPE, mp_ocierr);
		/* Retrieve the is null attribute */
		oci_ret = OCIAttrGet(mp_ociparam, (ub4)OCI_DTYPE_PARAM, (dvoid*)&nullable[i],
			(ub4 *)&null_len, (ub4)OCI_ATTR_IS_NULL, mp_ocierr);

		mp_ocidefine[i] = (OCIDefine *)NULL;

		switch(col_dtype[i])
			{
			case SQLT_CHR:
				/* oci_ret = OCIAttrGet(mp_ociparam, (ub4)OCI_DTYPE_PARAM, (dvoid *)&char_ocisize,
					(ub4 *)0, (ub4)OCI_ATTR_DATA_SIZE, mp_ocierr); */
				char_len[i] = MP_MAXSTRINGLEN-1;
				(void)memset((void *)oci_string[i], (int)NULL, MP_MAXSTRINGLEN);
				oci_ret = OCIDefineByPos(mp_ocistmt, &mp_ocidefine[i], mp_ocierr,
					i+1, (text *)oci_string[i], char_len[i], SQLT_CHR, (dvoid *)0,
					(ub2 *)0, (ub2 *)0, OCI_DEFAULT);
				if (oci_ret != OCI_SUCCESS && oci_ret != OCI_SUCCESS_WITH_INFO)
					{
					status = MPAPIdb_checkstatus(oci_ret, mp_ocierr);
					return(status);
					}
				break;
			case SQLT_FLT:
			case SQLT_NUM:
/****
				/* get the precision for column i+1 
				oci_ret = OCIAttrGet(mp_ociparam, OCI_DTYPE_PARAM, &oci_precision, (ub4 *)0,
					OCI_ATTR_PRECISION, mp_ocierr);
				/* get scale of column i+1 
				oci_ret = OCIAttrGet(mp_ociparam, OCI_DTYPE_PARAM, &oci_scale, (ub4 *)0,
					OCI_ATTR_SCALE, mp_ocierr);
				/* check if it is a number (int) or a float
				if ((oci_precision != 0) && (oci_scale = -127))
					{
					oci_ret = OCIDefineByPos(mp_ocistmt, &mp_ocidefine[i], mp_ocierr,
						i+1, &oci_num[i], sizeof(oci_num[i]), SQLT_FLT, (dvoid *)0,
						(ub2 *)0, (ub2 *)0, OCI_DEFAULT);
					}
				else
					{
					oci_ret = OCIDefineByPos(mp_ocistmt, &mp_ocidefine[i], mp_ocierr,
						i+1, &oci_num[i], sizeof(oci_num[i]), SQLT_INT, (dvoid *)0,
						(ub2 *)0, (ub2 *)0, OCI_DEFAULT);
					}
***/
				oci_ret = OCIDefineByPos(mp_ocistmt, &mp_ocidefine[i], mp_ocierr,
					i+1, &oci_num[i], sizeof(oci_num[i]), SQLT_INT, (dvoid *)0,
					(ub2 *)0, (ub2 *)0, OCI_DEFAULT);
				break;
			case SQLT_DAT:
				oci_ret = OCIDefineByPos(mp_ocistmt, &mp_ocidefine[i], mp_ocierr,
					i+1, &oci_dat[i], sizeof(oci_num[i]), SQLT_DAT, (dvoid *)0,
					(ub2 *)0, (ub2 *)0, OCI_DEFAULT);
				break;
			default:
				status = MPERROR;
			/* possible OCI handled variables:
			VARCHAR2 1 char[n] SQLT_CHR
			NUMBER 2 unsigned char[21] SQLT_NUM
			8-bit signed INTEGER 3 signed char SQLT_INT
			16-bit signed INTEGER 3 signed short, signed int SQLT_INT
			32-bit signed INTEGER 3 signed int, signed long SQLT_INT
			FLOAT 4 float, double SQLT_FLT
			Null-terminated STRING 5 char[n+1] SQLT_STR
			VARNUM 6 char[22] SQLT_VNU
			LONG 8 char[n] SQLT_LNG
			VARCHAR 9 char[n+sizeof(short integer)] SQLT_VCS
			ROWID 11 char[n] SQLT_RID (see note 1)
			DATE 12 char[7] SQLT_DAT
			VARRAW 15 unsigned
			char[n+sizeof(short integer)]
			SQLT_VBI
			RAW 23 unsigned char[n] SQLT_BIN
			LONG RAW 24 unsigned char[n] SQLT_LBI
			UNSIGNED INT 68 unsigned SQLT_UIN
			LONG VARCHAR 94 char[n+sizeof(integer)] SQLT_LVC
			LONG VARRAW 95 unsigned char[n+sizeof(integer)]	SQLT_LVB
			CHAR 96 char[n] SQLT_AFC
			CHARZ 97 char[n+1] SQLT_AVC
			ROWID descriptor 104 OCIRowid SQLT_RDD
			NAMED DATA TYPE 108 struct SQLT_NTY
			REF 110 OCIRef SQLT_REF
			Character LOB 112 OCILobLocator (see note 3) SQLT_CLOB
			Binary LOB 113 OCILobLocator (see note 3) SQLT_BLOB
			Binary FILE 114 OCILobLocator SQLT_FILE
			OCI string type 155 OCIString SQLT_VST (see note 2)
			OCI date type 156 OCIDate SQLT_ODT (see note 2)
			*/
			}
		if (oci_ret != OCI_SUCCESS && oci_ret != OCI_SUCCESS_WITH_INFO)
			status = MPAPIdb_checkstatus(oci_ret, mp_ocierr);
		}

	if (status != MPSQL_OK)
		return(status);

	/* FETCH till END OF TABLE which means SQL_NO_DATA_FOUND (100) */
	allocsize = (def_table[table_nr].sqlrowlen * MP_ALLOCROWS);
	while (TRUE)
		{
		oci_ret = OCIStmtFetch(mp_ocistmt, mp_ocierr, 1, OCI_FETCH_NEXT, OCI_DEFAULT);
		if (oci_ret == OCI_NO_DATA)  /* NO_DATA_FOUND is equal to Endoftable */
			break;

		/* read row for row */
		*mp_rowcount = ((*mp_rowcount) + 1);
		allocsize = (allocsize + (def_table[table_nr].sqlrowlen + 100));
		if (allocsize > *alloclen)
			*mp_sqltargetptr = (char *)MPalloc((void *)*mp_sqltargetptr, alloclen,
			   SQLMEMCHUNK, allocsize, sizeof(char));
		for (i=0, structcnt = 0; i < nresultcols; i++, structcnt++)
			{
			structsize = def_table[table_nr].elements[structcnt].leng;
			switch(col_dtype[i])
				{
				case SQLT_CHR:
					(void)memset((void *)(*mp_sqltargetptr + memoff), (int)NULL, structsize);
					if (char_len[i] > structsize)
						copysize = structsize;
					else
						copysize = (size_t)char_len[i];
					(void)memcpy((void *) (*mp_sqltargetptr + memoff),
					   (void *)oci_string[i], copysize);
					/* set last byte to NULL and truncate any spaces to NULL from the end */
					(*mp_sqltargetptr)[memoff + copysize-1] = '\0';
					MPAPIdb_truncate_blanks((*mp_sqltargetptr +memoff));
					memoff += structsize;
					break;
				case SQLT_FLT:
				case SQLT_NUM:
					if (def_table[table_nr].elements[structcnt].typ == DB_INT)
						{
						int_data = (int)oci_num[i];
						(void)memcpy((void *) (*mp_sqltargetptr + memoff),
						   (void *)&int_data, sizeof(int));
						memoff += structsize;
						}
					else
						{
						double_data = (double)oci_num[i];
						(void)memcpy((void *) (*mp_sqltargetptr + memoff),
						   (void *)&double_data, sizeof(double));
						memoff += structsize;
						}
					break;
				case SQLT_DAT:
					break;
				default:
					status = MPERROR;
				}
			/* check if it is a NULLABLE field an if so increment structcounter and
			   init the memory and set the the memory offset pointer */
			int_nullable = (int)nullable[i];
			if (int_nullable == (int)1)
				{
				structcnt++;
				structsize = def_table[table_nr].elements[structcnt].leng;
				(void)memset((void *)(*mp_sqltargetptr + memoff), (int)NULL, structsize);
				memoff += structsize;
				}
			}
		}

	/* stop time logging */
	if (logging_sql)
		{
		sprintf(logtext, "COMMAND EXECUTION TIME IS %f SECONDS",
		        (difftime(time(NULL), aclock)));
		MPlog(_LOGSQL, status, logtext, __FILE__);
		MPlog(_LOGSQL, status, mp_sqlquery, __FILE__);
		}

	/*****************************************
	* Note that memory is never free'd, but
	* reused next time around, to prevent
	* breaking it up into unusable chunks.
	* managed by MPalloc() !
	*****************************************/

	/* free up SQL statement (includes CLOSE CURSOR if any) */
	oci_ret = OCIHandleFree((dvoid *)mp_ocistmt, OCI_HTYPE_STMT);
	if (oci_ret != OCI_SUCCESS && oci_ret != OCI_SUCCESS_WITH_INFO)
		status = MPAPIdb_checkstatus(oci_ret, mp_ocierr);

	/* set correct datalen */
	*datalen = (unsigned long)memoff;

	return(status);
}


/**************************************************************/
/* Function:  commit RDBMS command                            */
/*                                                            */
/* Parameter: void                                            */
/* Return:    ERROR / MPSQL_OK                                */
/**************************************************************/
int MPAPIdb_sqlcommand(char *command_string, int *anzahl)
{
	/*******************
	* Local variables
	*******************/
	time_t aclock;
	int status=(int)MPSQL_OK;
	int querySize = 0;
	char logtext[_RECORDLEN];

	/* local OCI vars */
	OCIParam *mp_ociparam;
	sword oci_ret;


	/* init anzahl to zero */
	*anzahl = 0;

	/* alloc handle for a SQL statement */
	oci_ret = OCIHandleAlloc((dvoid *)mp_ocienv, (dvoid **)&mp_ocistmt,
		OCI_HTYPE_STMT, (size_t)0, (dvoid **)0);
	if (oci_ret != OCI_SUCCESS && oci_ret != OCI_SUCCESS_WITH_INFO)
		{
		status = MPAPIdb_checkstatus(oci_ret, mp_ocierr);
		return(status);
		}

	/* start time logging */
	if (logging_sql)
		aclock = time(NULL);

	/* check termination of query string */
	querySize = strlen(command_string);
	if ( command_string[querySize - 1] == ';' )
		{
		command_string[querySize - 1] = '\0';
		querySize--;
		}

	/* prepare SQL statement */
	oci_ret = OCIStmtPrepare(mp_ocistmt, mp_ocierr, command_string, (ub4)querySize,
		(ub4)OCI_NTV_SYNTAX, (ub4)OCI_DEFAULT);
	if (oci_ret != OCI_SUCCESS && oci_ret != OCI_SUCCESS_WITH_INFO)
		{
		status = MPAPIdb_checkstatus(oci_ret, mp_ocierr);
		return(status);
		}

	oci_ret = OCIStmtExecute(mp_ociservice, mp_ocistmt, mp_ocierr, (ub4)1, (ub4)0,
		(CONST OCISnapshot *)NULL, (OCISnapshot *)NULL, OCI_DEFAULT);
	if (oci_ret != OCI_SUCCESS && oci_ret != OCI_SUCCESS_WITH_INFO)
		{
		status = MPAPIdb_checkstatus(oci_ret, mp_ocierr);
		return(status);
		}

	/* stop time logging */
	if (logging_sql)
		{
		sprintf(logtext, "COMMAND EXECUTION TIME IS %f SECONDS",
		        (difftime(time(NULL), aclock)));
		MPlog(_LOGSQL, status, logtext, __FILE__);
		MPlog(_LOGSQL, status, command_string, __FILE__);
		}

	/* free up SQL statement */
	oci_ret = OCIHandleFree((dvoid *)mp_ocistmt, OCI_HTYPE_STMT);
	if (oci_ret != OCI_SUCCESS && oci_ret != OCI_SUCCESS_WITH_INFO)
		status = MPAPIdb_checkstatus(oci_ret, mp_ocierr);

	return(status);
}


/*SF***********************************************************/
/* Function:  check sql state                                 */
/*                                                            */
/* Parameter: void                                            */
/* Return:    ERROR / MPSQL_OK                                */
/**************************************************************/
static int MPAPIdb_checkstatus( sword status, OCIError *ocierrhandler )
{
	text errbuf[512];
	ub4 buflen;
	ub4 errcode;
	char msgbuf[600];

	switch (status)
		{
		case OCI_SUCCESS:
			break;
		case OCI_SUCCESS_WITH_INFO:
			(void)OCIErrorGet(ocierrhandler, (ub4)1, (text *)NULL, &errcode,
				errbuf, (ub4)sizeof(errbuf), OCI_HTYPE_ERROR);
			(void)sprintf(msgbuf, "Error - %s", errbuf);
			UtilMsgWrite("Error - OCI_SUCCESS_WITH_INFO");
			if (logging_sql)
				{
				/* log error messages */
				MPlog(_LOGSQL, status, msgbuf, __FILE__);
				}
			break;
		case OCI_NEED_DATA:
			(void)OCIErrorGet(ocierrhandler, (ub4)1, (text *)NULL, &errcode,
				errbuf, (ub4)sizeof(errbuf), OCI_HTYPE_ERROR);
			(void)sprintf(msgbuf, "Error - %s", errbuf);
			UtilMsgWrite("Error - OCI_NEED_DATA");
			if (logging_sql)
				{
				/* log error messages */
				MPlog(_LOGSQL, status, msgbuf, __FILE__);
				}
			break;
		case OCI_NO_DATA:
			(void)OCIErrorGet(ocierrhandler, (ub4)1, (text *)NULL, &errcode,
				errbuf, (ub4)sizeof(errbuf), OCI_HTYPE_ERROR);
			(void)sprintf(msgbuf, "Error - %s", errbuf);
			UtilMsgWrite("Error - OCI_NODATA");
			if (logging_sql)
				{
				/* log error messages */
				MPlog(_LOGSQL, status, msgbuf, __FILE__);
				}
			break;
		case OCI_ERROR:
			(void)OCIErrorGet(ocierrhandler, (ub4)1, (text *)NULL, &errcode,
				errbuf, (ub4)sizeof(errbuf), OCI_HTYPE_ERROR);
			(void)sprintf(msgbuf, "Error - %s", errbuf);
			UtilMsgWrite(msgbuf);
			if (logging_sql)
				{
				/* log error messages */
				MPlog(_LOGSQL, status, msgbuf, __FILE__);
				}
			break;
		case OCI_INVALID_HANDLE:
			(void)OCIErrorGet(ocierrhandler, (ub4)1, (text *)NULL, &errcode,
				errbuf, (ub4)sizeof(errbuf), OCI_HTYPE_ERROR);
			(void)sprintf(msgbuf, "Error - %s", errbuf);
			UtilMsgWrite("Error - OCI_INVALID_HANDLE");
			if (logging_sql)
				{
				/* log error messages */
				MPlog(_LOGSQL, status, msgbuf, __FILE__);
				}
			break;
		case OCI_STILL_EXECUTING:
			(void)OCIErrorGet(ocierrhandler, (ub4)1, (text *)NULL, &errcode,
				errbuf, (ub4)sizeof(errbuf), OCI_HTYPE_ERROR);
			(void)sprintf(msgbuf, "Error - %s", errbuf);
			UtilMsgWrite("Error - OCI_STILL_EXECUTE");
			if (logging_sql)
				{
				/* log error messages */
				MPlog(_LOGSQL, status, msgbuf, __FILE__);
				}
			break;
		default:
			(void)sprintf(msgbuf, "Error - unknown return code from oci function: %d\n", status);
			UtilMsgWrite(msgbuf);
			break;
		}
   return(status);
}

/*SF***********************************************************/
/* Function:  truncate spaces/blanks from the end to the      */
/*            beginning of a string to the value NULL         */
/* Parameter: void                                            */
/* Return:    void                                            */
/**************************************************************/
static void MPAPIdb_truncate_blanks(char *buffer)
{
	int i, len;

	len = strlen(buffer);

	for(i=(len - 1); (i > (int)-1); i--)
		{
		if (buffer[i] == ' ')
			buffer[i] = (char)NULL;
		else if (buffer[i] == (char)NULL)
			continue;
		else
			break;
		}
}

