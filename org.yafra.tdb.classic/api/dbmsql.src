/*D***********************************************************
 * modul:     SQL INTERFACE all DB access functions
 *
 * db:        Microsoft ODBC
 *
 * copyright: yafra.org, Switzerland, 2004
 *************************************************************/
static char rcsid[]="$Header: /yafra/cvsroot/mapo/source/api/dbmsql.src,v 1.5 2004-01-30 17:26:25 mwn Exp $";

#if !defined(MPDBMSSQL)
#define MPDBMSSQL
#undef MPDBORACLE
#undef MPDBODBC
#undef MPDBMYSQL
#endif

/* needed to avoid conflict with defines with DB-Library includes */
#define WIN32_LEAN_AND_MEAN

/* MARCO POLO includes */
#include <mpdb.h>      /* Includefile fuer die Relationalen Datenbanken */
#include <mpmain.h>    /* Includefile fuer MARCO-POLO */
#include <mpproapi.h>  /* Prototypes fï¿½r ANSI-C */
#include <mpprolib.h>
#include "version.h"

/* Microsoft DB-Library includes */
#define DBNTWIN32
// #include <windows.h>
#include <sqlfront.h>
#include <sqldb.h>

/* local prototyps */
static int MPAPIdb_execsql(char *);
int MPAPIdb_error(PDBPROCESS, int, int, int, char*, char*);
int MPAPIdb_msg(PDBPROCESS, DBINT, int, int, char*);
static void MPAPIdb_truncate_blanks(char *);

/* some defines */
#define		SQL_MESSAGE	132
#define		SQL_NAME	128
#define		SQL_MAX_COL	50
#define		SQL_MAX_ROW_LEN	8192
#define		SQL_MAX_ROW	50
#define		SQL_MAX_BUF	SQL_MAX_ROW_LEN*SQL_MAX_ROW
#define     SQLMEMCHUNK 102400
#define		MP_MAXCOLS 50
#define		MP_ALLOCROWS 10


/**************************************************************/
/* SQL globals                                                */
/**************************************************************/
/* include def_table struct */
#include <mpdbglob.h>

extern unsigned char logging_sql;
extern unsigned char logging_sqltm;
extern char userid[];
extern char userpassword[];

/* ODBC global SQL handlers */
PDBPROCESS  dbproc;    // The connection with SQL Server. 
PLOGINREC   login;     // The login information. 

/* logging variables */
char            logbuffer[RECLAENGE];
time_t          starttime;
unsigned int    trxcount;

char     DBE_Name[128];           /* SQL_NAME + 1 */
char     errorMessageBuffer[2048];
char     IngresMSGbuffer[RECLENGTH];	/* Fehlermeldungen des Systems */
int      MessageNumber;	            /* Fehlernummer des Systems */

/* can I still use this ?? */
int     Save_point;


/**************************************************************/
/* Function:  open db                                         */
/*                                                            */
/* Parameter: db path and name                                */
/* Return:    ERROR / MPSQL_OK                                */
/**************************************************************/
int MPAPIdb_connect(char *aDBname, char *aUsername, char *aPassword)
{
	LPCSTR sqlversion;

	// Install user-supplied error- and message-handling functions.
	dberrhandle(MPAPIdb_error);
	dbmsghandle(MPAPIdb_msg);

	// Initialize DB-Library.
	sqlversion = dbinit();
	if (sqlversion == NULL)
		return((int)MPDBERROR);

	// Get a LOGINREC.
	login = dblogin();
	if (login == NULL)
		return((int)MPDBERROR);
	DBSETLUSER(login, aUsername);
	DBSETLPWD(login, aPassword);
	DBSETLAPP(login, aDBname);

	// Get a DBPROCESS structure for communication with SQL Server. 
	dbproc = dbopen(login, "localhost");
	if (dbproc == NULL)
		return((int)MPDBERROR);

	/* print logging */
	if (logging_sql)
		{
		(void)sprintf(logbuffer, "OPEN DB %s", aDBname);
		MPlog(_LOGSQL, (int)MPSQL_OK, logbuffer, __FILE__);
		}

	return((int)MPSQL_OK);
}

/**************************************************************/
/* Function:  release db and check sql state                  */
/*                                                            */
/* Parameter: void                                            */
/* Return:    ERROR / MPSQL_OK                                */
/**************************************************************/
int MPAPIdb_release(void)
{
	// Close the connection to SQL Server. 
	dbexit();

	/* print logging */
	if (logging_sql)
		{
		(void)sprintf(logbuffer, "CLOSE DB %s - NUMBER OF TRX: %d",
		              DBE_Name, trxcount);
		MPlog(_LOGSQL, (int)MPSQL_OK, logbuffer, __FILE__);
		}

	return((int)MPSQL_OK);
}


/**************************************************************/
/* Function:  start a db transaction                          */
/*                                                            */
/* Parameter: void                                            */
/* Return:    ERROR / MPSQL_OK                                */
/**************************************************************/
int MPAPIdb_begintrx(int isolationlevel, int priority)
{
	extern unsigned int trxcount;
	extern time_t starttime;

	int status = (int)MPSQL_OK;

	switch(isolationlevel)
		{
		case SQLISOLATION_RR:
			status = MPAPIdb_execsql("SET TRANSACTION ISOLATION LEVEL SERIALIZABLE");
			break;
		case SQLISOLATION_CS:
			status = MPAPIdb_execsql("SET TRANSACTION ISOLATION LEVEL REPEATABLE READ");
			break;
		case SQLISOLATION_RC:
			status = MPAPIdb_execsql("SET TRANSACTION ISOLATION LEVEL READ COMMITTED");
			break;
		case SQLISOLATION_RU:
			status = MPAPIdb_execsql("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED");
			break;
		default:
			status = MPAPIdb_execsql("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED");
			break;
		}
	if (status != MPSQL_OK)
		return(status);

	status = MPAPIdb_execsql("BEGIN TRAN MAPO1");

	if (logging_sql)
		{
		trxcount++;
		starttime = time(NULL);
		MPlog(_LOGSQL, status, "BEGIN TRANSACTION", __FILE__);
		}

	return( status );
}


/**************************************************************/
/* Function:  set attributes of a db trx in progress          */
/*                                                            */
/* Parameter: void                                            */
/* Return:    ERROR / MPSQL_OK                                */
/**************************************************************/
int MPAPIdb_settrx(int isolationlevel, int priority)
{
	int status=(int)MPSQL_OK;

	switch(isolationlevel)
		{
		case SQLISOLATION_RR:
			status = MPAPIdb_execsql("SET TRANSACTION ISOLATION LEVEL SERIALIZABLE");
			break;
		case SQLISOLATION_CS:
			status = MPAPIdb_execsql("SET TRANSACTION ISOLATION LEVEL REPEATABLE READ");
			break;
		case SQLISOLATION_RC:
			status = MPAPIdb_execsql("SET TRANSACTION ISOLATION LEVEL READ COMMITTED");
			break;
		case SQLISOLATION_RU:
			status = MPAPIdb_execsql("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED");
			break;
		default:
			status = MPAPIdb_execsql("SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED");
			break;
		}

	if (logging_sql)
		MPlog(_LOGSQL, status, "CHANGED TRANSACTION ISOLATIONLEVEL", __FILE__);

	return(status);
}


/**************************************************************/
/* Function:  write data to db and set savepoint              */
/*                                                            */
/* Parameter: void                                            */
/* Return:    ERROR / MPSQL_OK                                */
/**************************************************************/
void MPAPIdb_committrx(void)
{
	int status = (int)MPSQL_OK;

	status = MPAPIdb_execsql("COMMIT TRAN MAPO1");

	if (logging_sql)
		{
		char textbuf[_RECORDLEN];
		sprintf (textbuf, "END TRANSACTION - TRANSACTION TIME: %f SECONDS",
		        (difftime(time(NULL), starttime)));
		MPlog(_LOGSQL, status, textbuf, __FILE__);
		}

	return;
}

/**************************************************************/
/* Function:  rollback/cancel current transaction             */
/*            started by begin_transaction()                  */
/*                                                            */
/* Parameter: void                                            */
/* Return:    ERROR / MPSQL_OK                                */
/**************************************************************/
void MPAPIdb_rollbacktrx(void)
{
	extern time_t starttime;
	int status=(int)MPSQL_OK;

	status = MPAPIdb_execsql("ROLLBACK TRAN MAPO1");

	if (logging_sql)
		{
		char textbuf[_RECORDLEN];
		sprintf(textbuf, "CANCEL/ROLLBACK TRANSACTION - TRANSACTION TIME: %f SECONDS",
		        (difftime(time(NULL), starttime)));
		MPlog(_LOGSQL, status, textbuf, __FILE__);
		}

	return;
}

/**************************************************************/
/* Function:  write data to db and set savepoint              */
/*                                                            */
/* Parameter: void                                            */
/* Return:    ERROR / MPSQL_OK                                */
/**************************************************************/
int MPAPIdb_setsavepoint(int *save_point)
{
	int status = (int) MPSQL_OK;

	status = MPAPIdb_execsql("SAVE TRAN SAVPOINT1");

	if (logging_sql)
		MPlog(_LOGSQL, status, "SAVEPOINT1 SET", __FILE__);

	return( status );
}


/**************************************************************/
/* Function:  delete work back to the next savepoint          */
/*                                                            */
/* Parameter: savepoint                                       */
/* Return:    ERROR / MPSQL_OK                                */
/**************************************************************/
int MPAPIdb_rollbacksavepoint(int *save_point )
{
	int status = (int) MPSQL_OK;

	status = MPAPIdb_execsql("ROLLBACK TRAN SAVPOINT1");

	if (logging_sql)
		MPlog(_LOGSQL, status, "ROLLBACK TO SAVEPOINT1", __FILE__);

	return(status);
}


/*F***********************************************************
 * Function:  commit a sql command to db and put the data     
 *            to the global memory
 *                                                            
 * Parameter: void                                            
 * Return:    ERROR / MPSQL_OK                                
 *************************************************************/
int MPAPIdb_sqlquery(int table_nr, char **mp_sqltargetptr, char *mp_sqlquery,
       int  *mp_rowcount, unsigned long *datalen, unsigned long *alloclen)
{
	/* define return codes */
	RETCODE	cret;
	int		status = (int)MPSQL_OK;

	/* define temporary vars */
	int		i;
	int		nresultcols;
	size_t	querySize;
	size_t	copysize;
	size_t	structsize;
	int		structcnt;
	int		memoff = (int)0;			/* Offset into output buffer */
	size_t	allocsize  = (size_t)0;	/* memory to allocate */

	/* BIND descriptions of all cols */
	int		coltype[MP_MAXCOLS];
	int		nullable[MP_MAXCOLS];
	int		collen[MP_MAXCOLS];
	DBCOL		colinfo;

	/* temporary buffers for BIND */
	char		char_data[_CHARMAXLEN][MP_MAXCOLS];
	int		char_len[MP_MAXCOLS];
	int		int_data[MP_MAXCOLS];
	float		float_data[MP_MAXCOLS];
	double	double_value;

	/* logging */
	time_t aclock;
	char logtext[_RECORDLEN];

	/* init */
	*mp_rowcount = 0;

	/* start time logging */
	if (logging_sql)
		aclock = time(NULL);

	/*****************************************
	* If mp_sqltargetptr = (char **)0, then this
	* is not a query, this is a major bug.
	*****************************************/
	if (mp_sqltargetptr == (char **)NULL)
		return(MPERROR);

	/* check termination of query string */
	querySize = strlen(mp_sqlquery);
	if (mp_sqlquery[querySize - 1] == ';')
		{		
		mp_sqlquery[querySize - 1] = '\0';
		querySize--;
		}

	// First, put the command into the command buffer. 
	status = MPAPIdb_execsql(mp_sqlquery);
	if (status != MPSQL_OK)
		return(status);

	// get each type of each col (dbcolinfo())
	// bind it
	nresultcols = dbnumcols(dbproc);
	for (i=0; i<nresultcols; i++)
		{
		colinfo.SizeOfStruct = (DBINT)sizeof(colinfo);
		cret = dbcolinfo(dbproc, CI_REGULAR, (i+1), 0, (LPDBCOL)&colinfo);
		coltype[i] = colinfo.Type;
		nullable[i] = colinfo.Null;
		collen[i] = colinfo.MaxLength;

		// debug
		// printf("column %d, type is %s.\n", (i+1), dbprtype(coltype[i]));

		switch(coltype[i])
			{
			case SQLCHAR:
				(void)memset((void *)char_data[i], (int)NULL, _CHARMAXLEN);
				char_len[i] = dbdatlen(dbproc, i+1);
				cret = dbbind(dbproc, i+1, STRINGBIND, (DBINT)char_len[i], char_data[i]);
				break;
			case SQLINT1:
			case SQLINT2:
			case SQLINT4:
				cret = dbbind(dbproc, i+1, INTBIND, (DBINT) 0, (BYTE *) &int_data[i]);
				break;
			case SQLFLT8:
				cret = dbbind(dbproc, i+1, FLT8BIND, (DBINT) 0, (BYTE *) &float_data[i]);
				break;
			default:
				status = MPERROR;
			}
		}
	if (status != MPSQL_OK)
		return(status);

	/* FETCH till END OF TABLE which means SQL_NO_DATA_FOUND (100) */   
	allocsize = (def_table[table_nr].sqlrowlen * MP_ALLOCROWS);
	do {
		// just debug
		cret = dbprrow(dbproc);
		if (cret == FAIL)
			return((int)MPDBERROR);

		/* read row for row */
		*mp_rowcount = ((*mp_rowcount) + 1);
		allocsize = (allocsize + (def_table[table_nr].sqlrowlen + 100));
		if (allocsize > *alloclen)
			*mp_sqltargetptr = (char *)MPalloc((void *)*mp_sqltargetptr, alloclen,
			   SQLMEMCHUNK, allocsize, sizeof(char));
		for (i=0, structcnt = 0; i < nresultcols; i++, structcnt++)
			{
			structsize = def_table[table_nr].elements[structcnt].leng;
			switch(coltype[i])
				{
				case SQLCHAR:
					(void)memset((void *)(*mp_sqltargetptr + memoff), (int)NULL, structsize);
					if (char_len[i] > structsize)
						copysize = structsize;
					else
						copysize = (size_t)char_len[i];
					(void)memcpy((void *) (*mp_sqltargetptr + memoff),
					   (void *)char_data[i], copysize);
					/* set last byte to NULL and truncate any spaces to NULL from the end */
					(*mp_sqltargetptr)[memoff + copysize-1] = '\0';
					MPAPIdb_truncate_blanks((*mp_sqltargetptr +memoff));
					memoff += structsize;
					break;
				case SQLINT1:
				case SQLINT2:
				case SQLINT4:
					(void)memcpy((void *) (*mp_sqltargetptr + memoff),
					   (void *)&int_data[i], sizeof(int));
					memoff += structsize;
					break;
				case SQLFLT8:
					double_value = (double)float_data[i];
					(void)memcpy((void *) (*mp_sqltargetptr + memoff),
					   (void *)&double_value, sizeof(double));
					memoff += structsize;
					break;
				default:
					status = MPERROR;
				}
			if (nullable[i] == TRUE)
				{
				structcnt++;
				structsize = def_table[table_nr].elements[structcnt].leng;
				(void)memset((void *)(*mp_sqltargetptr + memoff), (int)NULL, structsize);
				memoff += structsize;
				}
			}
		} while (dbnextrow(dbproc) != NO_MORE_ROWS);

	/* stop time logging */
	if (logging_sql)
		{
		sprintf(logtext, "COMMAND EXECUTION TIME IS %f SECONDS",
		        (difftime(time(NULL), aclock)));
		MPlog(_LOGSQL, status, logtext, __FILE__);
		MPlog(_LOGSQL, status, mp_sqlquery, __FILE__);
		}

	/* set correct datalen */
	*datalen = (unsigned long)memoff;

	return(status);
}


/**************************************************************/
/* Function:  commit RDBMS command                            */
/*                                                            */
/* Parameter: void                                            */
/* Return:    ERROR / MPSQL_OK                                */
/**************************************************************/
int MPAPIdb_sqlcommand(char *command_string, int *anzahl)
{
	/*******************
	* Local variables
	*******************/
	DBINT rowsaffected;
	time_t aclock;
	int status=(int)MPSQL_OK;
	int querySize = 0;
	char logtext[_RECORDLEN];

	/* init anzahl to zero */
	*anzahl = 0;

	/* alloc memory for a SQL statement */

	/* start time logging */
	if (logging_sql)
		aclock = time(NULL);

	/* check termination of query string */
	querySize = strlen(command_string);
	if ( command_string[querySize - 1] == ';' )
		{
		command_string[querySize - 1] = '\0';
		querySize--;
		}

	/* process SQL command (DELETE, INSERT, UPDATE) */
	status = MPAPIdb_execsql(command_string);
	if (status != MPSQL_OK)
		return(status);

	// get rows which were affected by the SQL command
	rowsaffected = dbcount(dbproc);
	*anzahl = rowsaffected;

	/* stop time logging */
	if (logging_sql)
		{
		sprintf(logtext, "COMMAND EXECUTION TIME IS %f SECONDS",
		        (difftime(time(NULL), aclock)));
		MPlog(_LOGSQL, status, logtext, __FILE__);
		MPlog(_LOGSQL, status, command_string, __FILE__);
		}

	/* free up SQL statement */

	return(status);
}

/*SF***********************************************************/
/* Function:  check sql state                                 */
/*                                                            */
/* Parameter: void                                            */
/* Return:    ERROR / MPSQL_OK                                */
/**************************************************************/
static int MPAPIdb_execsql(char *sqlstmt)
{
	RETCODE cret;

	cret = dbcmd(dbproc, sqlstmt);
	if (cret == FAIL)
		return((int)MPDBERROR);
	// Send the command to SQL Server and start execution. 
	cret = dbsqlexec(dbproc);
	if (cret == FAIL)
		return((int)MPDBERROR);
	// Process the results. 
	cret = dbresults(dbproc);
	if (cret == FAIL)
		return((int)MPDBERROR);

	return((int)MPSQL_OK);
}

/*F************************************************************/
/* Function:  check sql state                                 */
/*                                                            */
/* Parameter: void                                            */
/* Return:    ERROR / MPSQL_OK                                */
/**************************************************************/
int MPAPIdb_error(PDBPROCESS dbproc, int severity, int dberr, int oserr,
    char *dberrstr, char *oserrstr)
{
	if (logging_sql)
		{
		/* log error messages */
		MPlog(_LOGSQL, dberr, dberrstr, __FILE__);
		}
	UtilMsgWrite(dberrstr);
	if (oserr != DBNOERR)
		{
		if (logging_sql)
			{
			/* log error messages */
			MPlog(_LOGSQL, oserr, oserrstr, __FILE__);
			}
		UtilMsgWrite(oserrstr);
		}
	return (INT_CANCEL);
}

/*F************************************************************/
/* Function:  check sql state                                 */
/*                                                            */
/* Parameter: void                                            */
/* Return:    ERROR / MPSQL_OK                                */
/**************************************************************/
int MPAPIdb_msg(PDBPROCESS dbproc, DBINT msgno, int msgstate, int severity,
    char *msgtext)
{
	if (logging_sql)
		{
		/* log error messages */
		MPlog(_LOGSQL, msgno, msgtext, __FILE__);
		}
	UtilMsgWrite(msgtext);
	return (0);
}


/*SF***********************************************************/
/* Function:  truncate spaces/blanks from the end to the      */
/*            beginning of a string to the value NULL         */
/* Parameter: void                                            */
/* Return:    void                                            */
/**************************************************************/
static void MPAPIdb_truncate_blanks(char *buffer)
{
	int i, len;

	len = strlen(buffer);

	for(i=(len - 1); (i > (int)-1); i--)
		{
		if (buffer[i] == ' ')
			buffer[i] = (char)NULL;
		else if (buffer[i] == (char)NULL)
			continue;
		else
			break;
		}
}
